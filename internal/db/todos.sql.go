// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todos.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const completeTodo = `-- name: CompleteTodo :one
UPDATE todos
SET is_completed = true
WHERE todo_id = $1
RETURNING todo_id, user_id, project_id, parent_todo_id, title, description, is_completed, due_date, work_start_time, work_end_time, priority, created_at, updated_at, completed_at
`

func (q *Queries) CompleteTodo(ctx context.Context, todoID int32) (Todo, error) {
	row := q.db.QueryRow(ctx, completeTodo, todoID)
	var i Todo
	err := row.Scan(
		&i.TodoID,
		&i.UserID,
		&i.ProjectID,
		&i.ParentTodoID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.DueDate,
		&i.WorkStartTime,
		&i.WorkEndTime,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (user_id, project_id, parent_todo_id, title, description, due_date, work_start_time, work_end_time, priority)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING todo_id, user_id, project_id, parent_todo_id, title, description, is_completed, due_date, work_start_time, work_end_time, priority, created_at, updated_at, completed_at
`

type CreateTodoParams struct {
	UserID        int32              `json:"userId"`
	ProjectID     pgtype.Int4        `json:"projectId"`
	ParentTodoID  pgtype.Int4        `json:"parentTodoId"`
	Title         string             `json:"title"`
	Description   pgtype.Text        `json:"description"`
	DueDate       pgtype.Timestamptz `json:"dueDate"`
	WorkStartTime pgtype.Timestamptz `json:"workStartTime"`
	WorkEndTime   pgtype.Timestamptz `json:"workEndTime"`
	Priority      pgtype.Int4        `json:"priority"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo,
		arg.UserID,
		arg.ProjectID,
		arg.ParentTodoID,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.WorkStartTime,
		arg.WorkEndTime,
		arg.Priority,
	)
	var i Todo
	err := row.Scan(
		&i.TodoID,
		&i.UserID,
		&i.ProjectID,
		&i.ParentTodoID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.DueDate,
		&i.WorkStartTime,
		&i.WorkEndTime,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE todo_id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, todoID int32) error {
	_, err := q.db.Exec(ctx, deleteTodo, todoID)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT todo_id, user_id, project_id, parent_todo_id, title, description, is_completed, due_date, work_start_time, work_end_time, priority, created_at, updated_at, completed_at FROM todos
WHERE todo_id = $1
`

func (q *Queries) GetTodo(ctx context.Context, todoID int32) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodo, todoID)
	var i Todo
	err := row.Scan(
		&i.TodoID,
		&i.UserID,
		&i.ProjectID,
		&i.ParentTodoID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.DueDate,
		&i.WorkStartTime,
		&i.WorkEndTime,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const listCompletedTodos = `-- name: ListCompletedTodos :many
SELECT todo_id, user_id, project_id, parent_todo_id, title, description, is_completed, due_date, work_start_time, work_end_time, priority, created_at, updated_at, completed_at FROM todos
WHERE user_id = $1 AND is_completed = true
ORDER BY completed_at DESC
`

func (q *Queries) ListCompletedTodos(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listCompletedTodos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.TodoID,
			&i.UserID,
			&i.ProjectID,
			&i.ParentTodoID,
			&i.Title,
			&i.Description,
			&i.IsCompleted,
			&i.DueDate,
			&i.WorkStartTime,
			&i.WorkEndTime,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPendingTodos = `-- name: ListPendingTodos :many
SELECT todo_id, user_id, project_id, parent_todo_id, title, description, is_completed, due_date, work_start_time, work_end_time, priority, created_at, updated_at, completed_at FROM todos
WHERE user_id = $1 AND is_completed = false
ORDER BY created_at DESC
`

func (q *Queries) ListPendingTodos(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listPendingTodos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.TodoID,
			&i.UserID,
			&i.ProjectID,
			&i.ParentTodoID,
			&i.Title,
			&i.Description,
			&i.IsCompleted,
			&i.DueDate,
			&i.WorkStartTime,
			&i.WorkEndTime,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodos = `-- name: ListTodos :many
SELECT todo_id, user_id, project_id, parent_todo_id, title, description, is_completed, due_date, work_start_time, work_end_time, priority, created_at, updated_at, completed_at FROM todos
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTodos(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.TodoID,
			&i.UserID,
			&i.ProjectID,
			&i.ParentTodoID,
			&i.Title,
			&i.Description,
			&i.IsCompleted,
			&i.DueDate,
			&i.WorkStartTime,
			&i.WorkEndTime,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodosByParent = `-- name: ListTodosByParent :many
SELECT todo_id, user_id, project_id, parent_todo_id, title, description, is_completed, due_date, work_start_time, work_end_time, priority, created_at, updated_at, completed_at FROM todos
WHERE user_id = $1 AND parent_todo_id = $2
ORDER BY created_at DESC
`

type ListTodosByParentParams struct {
	UserID       int32       `json:"userId"`
	ParentTodoID pgtype.Int4 `json:"parentTodoId"`
}

func (q *Queries) ListTodosByParent(ctx context.Context, arg ListTodosByParentParams) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodosByParent, arg.UserID, arg.ParentTodoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.TodoID,
			&i.UserID,
			&i.ProjectID,
			&i.ParentTodoID,
			&i.Title,
			&i.Description,
			&i.IsCompleted,
			&i.DueDate,
			&i.WorkStartTime,
			&i.WorkEndTime,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodosByProject = `-- name: ListTodosByProject :many
SELECT todo_id, user_id, project_id, parent_todo_id, title, description, is_completed, due_date, work_start_time, work_end_time, priority, created_at, updated_at, completed_at FROM todos
WHERE user_id = $1 AND project_id = $2
ORDER BY created_at DESC
`

type ListTodosByProjectParams struct {
	UserID    int32       `json:"userId"`
	ProjectID pgtype.Int4 `json:"projectId"`
}

func (q *Queries) ListTodosByProject(ctx context.Context, arg ListTodosByProjectParams) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodosByProject, arg.UserID, arg.ProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.TodoID,
			&i.UserID,
			&i.ProjectID,
			&i.ParentTodoID,
			&i.Title,
			&i.Description,
			&i.IsCompleted,
			&i.DueDate,
			&i.WorkStartTime,
			&i.WorkEndTime,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const uncompleteTodo = `-- name: UncompleteTodo :one
UPDATE todos
SET is_completed = false
WHERE todo_id = $1
RETURNING todo_id, user_id, project_id, parent_todo_id, title, description, is_completed, due_date, work_start_time, work_end_time, priority, created_at, updated_at, completed_at
`

func (q *Queries) UncompleteTodo(ctx context.Context, todoID int32) (Todo, error) {
	row := q.db.QueryRow(ctx, uncompleteTodo, todoID)
	var i Todo
	err := row.Scan(
		&i.TodoID,
		&i.UserID,
		&i.ProjectID,
		&i.ParentTodoID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.DueDate,
		&i.WorkStartTime,
		&i.WorkEndTime,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET project_id = $2, parent_todo_id = $3, title = $4, description = $5, due_date = $6, work_start_time = $7, work_end_time = $8, priority = $9
WHERE todo_id = $1
RETURNING todo_id, user_id, project_id, parent_todo_id, title, description, is_completed, due_date, work_start_time, work_end_time, priority, created_at, updated_at, completed_at
`

type UpdateTodoParams struct {
	TodoID        int32              `json:"todoId"`
	ProjectID     pgtype.Int4        `json:"projectId"`
	ParentTodoID  pgtype.Int4        `json:"parentTodoId"`
	Title         string             `json:"title"`
	Description   pgtype.Text        `json:"description"`
	DueDate       pgtype.Timestamptz `json:"dueDate"`
	WorkStartTime pgtype.Timestamptz `json:"workStartTime"`
	WorkEndTime   pgtype.Timestamptz `json:"workEndTime"`
	Priority      pgtype.Int4        `json:"priority"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodo,
		arg.TodoID,
		arg.ProjectID,
		arg.ParentTodoID,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.WorkStartTime,
		arg.WorkEndTime,
		arg.Priority,
	)
	var i Todo
	err := row.Scan(
		&i.TodoID,
		&i.UserID,
		&i.ProjectID,
		&i.ParentTodoID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.DueDate,
		&i.WorkStartTime,
		&i.WorkEndTime,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}
