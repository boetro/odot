// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, google_id, profile_picture_url)
VALUES ($1, $2, $3, $4)
RETURNING user_id, email, password_hash, google_id, profile_picture_url, created_at, updated_at
`

type CreateUserParams struct {
	Email             string      `json:"email"`
	PasswordHash      pgtype.Text `json:"passwordHash"`
	GoogleID          pgtype.Text `json:"googleId"`
	ProfilePictureUrl pgtype.Text `json:"profilePictureUrl"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.GoogleID,
		arg.ProfilePictureUrl,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, email, password_hash, google_id, profile_picture_url, created_at, updated_at FROM users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, password_hash, google_id, profile_picture_url, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT user_id, email, password_hash, google_id, profile_picture_url, created_at, updated_at FROM users
WHERE google_id = $1
`

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGoogleID, googleID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, email, password_hash, google_id, profile_picture_url, created_at, updated_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Email,
			&i.PasswordHash,
			&i.GoogleID,
			&i.ProfilePictureUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2, password_hash = $3, google_id = $4, profile_picture_url = $5
WHERE user_id = $1
RETURNING user_id, email, password_hash, google_id, profile_picture_url, created_at, updated_at
`

type UpdateUserParams struct {
	UserID            int32       `json:"userId"`
	Email             string      `json:"email"`
	PasswordHash      pgtype.Text `json:"passwordHash"`
	GoogleID          pgtype.Text `json:"googleId"`
	ProfilePictureUrl pgtype.Text `json:"profilePictureUrl"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserID,
		arg.Email,
		arg.PasswordHash,
		arg.GoogleID,
		arg.ProfilePictureUrl,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
