// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (user_id, parent_project_id, name, description, color)
VALUES ($1, $2, $3, $4, $5)
RETURNING project_id, user_id, parent_project_id, name, description, color, created_at, updated_at
`

type CreateProjectParams struct {
	UserID          int32       `json:"userId"`
	ParentProjectID pgtype.Int4 `json:"parentProjectId"`
	Name            string      `json:"name"`
	Description     pgtype.Text `json:"description"`
	Color           pgtype.Text `json:"color"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.UserID,
		arg.ParentProjectID,
		arg.Name,
		arg.Description,
		arg.Color,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.ParentProjectID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE project_id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, projectID int32) error {
	_, err := q.db.Exec(ctx, deleteProject, projectID)
	return err
}

const getProject = `-- name: GetProject :one
SELECT project_id, user_id, parent_project_id, name, description, color, created_at, updated_at FROM projects
WHERE project_id = $1
`

func (q *Queries) GetProject(ctx context.Context, projectID int32) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, projectID)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.ParentProjectID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT project_id, user_id, parent_project_id, name, description, color, created_at, updated_at FROM projects
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListProjects(ctx context.Context, userID int32) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.ParentProjectID,
			&i.Name,
			&i.Description,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectsByParent = `-- name: ListProjectsByParent :many
SELECT project_id, user_id, parent_project_id, name, description, color, created_at, updated_at FROM projects
WHERE user_id = $1 AND parent_project_id = $2
ORDER BY created_at DESC
`

type ListProjectsByParentParams struct {
	UserID          int32       `json:"userId"`
	ParentProjectID pgtype.Int4 `json:"parentProjectId"`
}

func (q *Queries) ListProjectsByParent(ctx context.Context, arg ListProjectsByParentParams) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjectsByParent, arg.UserID, arg.ParentProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.ParentProjectID,
			&i.Name,
			&i.Description,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET parent_project_id = $2, name = $3, description = $4, color = $5
WHERE project_id = $1
RETURNING project_id, user_id, parent_project_id, name, description, color, created_at, updated_at
`

type UpdateProjectParams struct {
	ProjectID       int32       `json:"projectId"`
	ParentProjectID pgtype.Int4 `json:"parentProjectId"`
	Name            string      `json:"name"`
	Description     pgtype.Text `json:"description"`
	Color           pgtype.Text `json:"color"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.ProjectID,
		arg.ParentProjectID,
		arg.Name,
		arg.Description,
		arg.Color,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.ParentProjectID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
