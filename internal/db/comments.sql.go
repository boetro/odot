// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comments.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (todo_id, user_id, content)
VALUES ($1, $2, $3)
RETURNING comment_id, todo_id, user_id, content, created_at, updated_at
`

type CreateCommentParams struct {
	TodoID  int32  `json:"todoId"`
	UserID  int32  `json:"userId"`
	Content string `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.TodoID, arg.UserID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.TodoID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE comment_id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, commentID int32) error {
	_, err := q.db.Exec(ctx, deleteComment, commentID)
	return err
}

const getComment = `-- name: GetComment :one
SELECT comment_id, todo_id, user_id, content, created_at, updated_at FROM comments
WHERE comment_id = $1
`

func (q *Queries) GetComment(ctx context.Context, commentID int32) (Comment, error) {
	row := q.db.QueryRow(ctx, getComment, commentID)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.TodoID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listComments = `-- name: ListComments :many
SELECT comment_id, todo_id, user_id, content, created_at, updated_at FROM comments
WHERE todo_id = $1
ORDER BY created_at ASC
`

func (q *Queries) ListComments(ctx context.Context, todoID int32) ([]Comment, error) {
	rows, err := q.db.Query(ctx, listComments, todoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.CommentID,
			&i.TodoID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommentsByUser = `-- name: ListCommentsByUser :many
SELECT comment_id, todo_id, user_id, content, created_at, updated_at FROM comments
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListCommentsByUser(ctx context.Context, userID int32) ([]Comment, error) {
	rows, err := q.db.Query(ctx, listCommentsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.CommentID,
			&i.TodoID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = $2
WHERE comment_id = $1
RETURNING comment_id, todo_id, user_id, content, created_at, updated_at
`

type UpdateCommentParams struct {
	CommentID int32  `json:"commentId"`
	Content   string `json:"content"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, updateComment, arg.CommentID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.TodoID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
